// Generated by CoffeeScript 1.3.3
(function() {
  var liveServer, path, program, server, watch;

  liveServer = require('./server');

  watch = require('./watch');

  program = require('commander');

  path = require('path');

  exports.liveServer = server = null;

  exports.wacthServer = watch;

  exports.createServer = function(options) {
    var key, opts, value;
    if (options == null) {
      options = {};
    }
    if (server) {
      return server;
    }
    opts = {
      apiVersion: '1.6',
      host: '0.0.0.0',
      port: '35729'
    };
    for (key in opts) {
      value = opts[key];
      if (options[key]) {
        opts[key] = options[value];
      }
    }
    return server = new liveServer(opts);
  };

  exports.watch = function(options, callback) {
    if (options == null) {
      options = {};
    }
    if (callback == null) {
      callback = function() {};
    }
    return watch.watch(options.path, options, function(event) {
      event.on('error', function(error) {
        return callback(error);
      });
      return event.on('change', function(file) {
        return callback(file);
      });
    });
  };

  exports.stop = function() {
    if (server) {
      return server.stop();
    }
  };

  exports.cli = function(argv) {
    var ignores, list;
    list = function(val) {
      return val.split(',');
    };
    program.version('0.1.0').option('-p, --path [path]', 'Watch path. Default is current directory', String).option('-e, --exts [items]', 'File extentions list split by comma', list).option('-i, --ignore [items], Ignore expression list split by comma ', list).parse(argv);
    if (!program.exts) {
      program.exts = watch.extentions;
    } else {
      program.exts = program.exts.concat(watch.extentions);
    }
    if (!program.path) {
      program.path = process.cwd();
    } else {
      program.path = path.resolve(process.cwd(), program.path);
    }
    if (program.ignore) {
      ignores = program.ignore;
      program.ignore = function(file) {
        var key, val, _i, _len;
        for (val = _i = 0, _len = ignores.length; _i < _len; val = ++_i) {
          key = ignores[val];
          if (new RegExp(val).test(file)) {
            return true;
          }
        }
        return false;
      };
    }
    exports.createServer();
    return exports.watch(program, function(file) {
      if (server) {
        return server.reloadBrowser([file]);
      }
    });
  };

}).call(this);
